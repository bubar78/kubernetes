apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: keycloak
  namespace: argo-cd
spec:
  project: default
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: keycloak
  source:
    chart: keycloak
    repoURL: 'https://charts.bitnami.com/bitnami'
    targetRevision: '12.2.0'
    helm:
      # Workaround: issue when using parameters, "true" is
      # interpreting as a bool instead of a string
      values: |
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: 'true'
            nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
            nginx.ingress.kubernetes.io/affinity: cookie
            nginx.ingress.kubernetes.io/session-cookie-name: stickounet
            nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
            nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"
            # nginx.ingress.kubernetes.io/configuration-snippet: |
            #   more_set_headers "X-Forwarded-For $http_x_forwarded_for";
            # nginx.ingress.kubernetes.io/configuration-snippet: |
            # location /auth {
            #         proxy_set_header X-Forwarded-Host $host;
            #         proxy_set_header X-Forwarded-Host HTTPS;
            #         proxy_set_header X-Forwarded-Server $host;
            #         proxy_set_header X-Real-IP $remote_addr;
            #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #         proxy_set_header X-Forwarded-Proto $scheme;
            #         proxy_set_header Host $http_host;
            #         proxy_set_header Upgrade $http_upgrade;
            #         proxy_set_header Connection "Upgrade";
            #         proxy_pass_request_headers on;
            # }
            # nginx.org/proxy-connect-timeout: 3600s
            # nginx.org/proxy-read-timeout: 3600s
            # nginx.org/proxy-send-timeout: 3600s
            # nginx.ingress.kubernetes.io/proxy-body-size: "8g"
            # nginx.ingress.kubernetes.io/configuration-snippet: |
            #   more_set_headers "Host              $http_host";
            #   more_set_headers "X-Real-IP         $remote_addr";
            #   more_set_headers "X-Forwarded-Proto $scheme";
            #   more_set_headers "X-Forwarded-For   $proxy_add_x_forwarded_for";
      parameters:
        - name: production
          value: 'true'
        - name: tls.enabled
          value: 'true'
        - name: tls.autoGenerated
          value: 'true'
        # - name: tls.usePem
        #   value: 'true'
        # - name: tls.existingSecret
        #   value: keycloak.gigix-tls
        - name: replicaCount
          value: '2'
        # - name: resources.limits.cpu
        #   value: XXXm
        # - name: resources.limits.memory
        #   value: XXXMi
        # - name: resources.requests.cpu
        #   value: XXXm
        # - name: resources.requests.memory
        #   value: XXXMi
        - name: priorityClassName
          value: system-cluster-critical
        - name: service.type
          value: ClusterIP
        - name: auth.adminUser
          value: admin
        - name: auth.adminPassword
          value: admin
        # - name: proxy
        #   value: edge
        - name: ingress.enabled
          value: 'true'
        - name: ingress.ingressClassName
          value: nginx
        - name: ingress.hostname
          value: keycloak.gigix
        - name: ingress.tls
          value: 'true'
        # - name: >-
        #     ingress.annotations.nginx\.ingress\.kubernetes\.io/ssl-passthrough
        #   value: "true"
        # - name: >-
        #     ingress.annotations.nginx\.ingress\.kubernetes\.io/force-ssl-redirect
        #   value: "true"
        - name: ingress.servicePort
          value: https
        - name: >-
            ingress.annotations.nginx\.ingress\.kubernetes\.io/backend-protocol
          value: https
        - name: >-
            ingress.annotations.nginx\.ingress\.kubernetes\.io/server-alias
          value: keycloak
        # - name: >-
        #     ingress.annotations.nginx\.ingress\.kubernetes\.io/configuration-snippet
        #   value: |
        #       more_set_headers "X-Forwarded-For \$http_x_forwarded_for";
        # - name: >-
        #     ingress.annotations.nginx\.ingress\.kubernetes\.io/force-ssl-redirect
        #   value: 'true'
        - name: >-
            ingress.annotations.cert-manager\.io/cluster-issuer
          value: selfsigned-cluster-issuer
        # - name: rbac.create
        #   value: 'true'
        # - name: rbac.rules
        #   value: []
        # - name: pdb.create
        #   value: 'true'
        # - name: autoscaling.enabled
        #   enabled: 'true'
        # - name: autoscaling.minReplicas
        #   value: '1'
        # - name: autoscaling.maxReplicas
        #   value: '4'
        # - name: autoscaling.targetCPU
        #   value: xxx
        # - name: autoscaling.targetMemory
        #   value: xxx
        # - name: logging.output
        #   value: json
        # - name: keycloakConfigCli.enabled
        #   value: 'true'
        - name: networkPolicy.enabled
          value: 'true'
        - name: networkPolicy.allowExternal
          value: 'true'
        - name: postgresql.architecture
          value: replication
        - name: metrics.enabled
          value: 'true'
        - name: metrics.serviceMonitor.enabled
          value: 'true'
        - name: metrics.serviceMonitor.labels.release
          value: prometheus-stack
        - name: metrics.prometheusRule.enabled
          value: 'true'
        - name: metrics.prometheusRule.groups[0].name
          value: Keycloak
        - name: metrics.prometheusRule.groups[0].rules[0].alert
          value: KeycloakInstanceNotAvailable
        - name: metrics.prometheusRule.groups[0].rules[0].annotations.message
          value: "Keycloak instance in namespace {{ `{{` }} $labels.namespace {{ `}}` }} has not been available for the last 5 minutes."
        - name: metrics.prometheusRule.groups[0].rules[0].expr
          value: absent(kube_pod_status_ready{namespace="{{ include "common.names.namespace" . }}", condition="true"} * on (pod) kube_pod_labels{pod=~"{{ include "common.names.fullname" . }}-\\d+", namespace="{{ include "common.names.namespace" . }}"}) != 0
        - name: metrics.prometheusRule.groups[0].rules[0].for
          value: 5m
        - name: metrics.prometheusRule.groups[0].rules[0].labels.severity
          value: critical
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PruneLast=true